<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "https://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Layering' level='1'/>
    <component name='ParticleSystems' level='3'/>
    <component name='Scripting' level='1'/>
    <meta name='created' content='Thu, 24 Apr 2025 22:05:11 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.8.2, https://create3000.github.io/sunrize/'/>
    <meta name='modified' content='Thu, 24 Apr 2025 22:49:46 GMT'/>
  </head>
  <Scene>
    <ProtoDeclare name='Birds'>
      <ProtoInterface>
        <field accessType='initializeOnly' type='SFInt32' name='numBirds' value='200'/>
        <field accessType='initializeOnly' type='SFFloat' name='scaleFactor' value='5'/>
        <field accessType='inputOutput' type='SFNode' name='appearance'/>
      </ProtoInterface>
      <ProtoBody>
        <Transform DEF='Birds'>
          <Shape>
            <IS>
              <connect nodeField='appearance' protoField='appearance'/>
            </IS>
            <IndexedTriangleFanSet DEF='_1'
                solid='false'
                index='0, 1, 2, 3, -1, 4, 5, 6, 7, -1, 8, 9, 10, 11, -1, 12, 13, 14, 15, -1, 16, 17, 18, 19, -1, 20, 21, 22, 23, -1, 24, 25, 26, 27, -1, 28, 29, 30, 31, -1, 32, 33, 34, 35, -1, 36, 37, 38, 39, -1, 40, 41, 42, 43, -1, 44, 45, 46, 47, -1, 48, 49, 50, 51, -1, 52, 53, 54, 55, -1, 56, 57, 58, 59, -1, 60, 61, 62, 63, -1, 64, 65, 66, 67, -1, 68, 69, 70, 71, -1, 72, 73, 74, 75, -1, 76, 77, 78, 79, -1, 80, 81, 82, 83, -1, 84, 85, 86, 87, -1, 88, 89, 90, 91, -1, 92, 93, 94, 95, -1, 96, 97, 98, 99, -1, 100, 101, 102, 103, -1, 104, 105, 106, 107, -1, 108, 109, 110, 111, -1, 112, 113, 114, 115, -1, 116, 117, 118, 119, -1, 120, 121, 122, 123, -1, 124, 125, 126, 127, -1, 128, 129, 130, 131, -1, 132, 133, 134, 135, -1, 136, 137, 138, 139, -1, 140, 141, 142, 143, -1, 144, 145, 146, 147, -1, 148, 149, 150, 151, -1, 152, 153, 154, 155, -1, 156, 157, 158, 159, -1, 160, 161, 162, 163, -1, 164, 165, 166, 167, -1, 168, 169, 170, 171, -1, 172, 173, 174, 175, -1, 176, 177, 178, 179, -1, 180, 181, 182, 183, -1, 184, 185, 186, 187, -1, 188, 189, 190, 191, -1, 192, 193, 194, 195, -1, 196, 197, 198, 199, -1, 200, 201, 202, 203, -1, 204, 205, 206, 207, -1, 208, 209, 210, 211, -1, 212, 213, 214, 215, -1, 216, 217, 218, 219, -1, 220, 221, 222, 223, -1, 224, 225, 226, 227, -1, 228, 229, 230, 231, -1, 232, 233, 234, 235, -1, 236, 237, 238, 239, -1, 240, 241, 242, 243, -1, 244, 245, 246, 247, -1, 248, 249, 250, 251, -1, 252, 253, 254, 255, -1, 256, 257, 258, 259, -1, 260, 261, 262, 263, -1, 264, 265, 266, 267, -1, 268, 269, 270, 271, -1, 272, 273, 274, 275, -1, 276, 277, 278, 279, -1, 280, 281, 282, 283, -1, 284, 285, 286, 287, -1, 288, 289, 290, 291, -1, 292, 293, 294, 295, -1, 296, 297, 298, 299, -1, 300, 301, 302, 303, -1, 304, 305, 306, 307, -1, 308, 309, 310, 311, -1, 312, 313, 314, 315, -1, 316, 317, 318, 319, -1, 320, 321, 322, 323, -1, 324, 325, 326, 327, -1, 328, 329, 330, 331, -1, 332, 333, 334, 335, -1, 336, 337, 338, 339, -1, 340, 341, 342, 343, -1, 344, 345, 346, 347, -1, 348, 349, 350, 351, -1, 352, 353, 354, 355, -1, 356, 357, 358, 359, -1, 360, 361, 362, 363, -1, 364, 365, 366, 367, -1, 368, 369, 370, 371, -1, 372, 373, 374, 375, -1, 376, 377, 378, 379, -1, 380, 381, 382, 383, -1, 384, 385, 386, 387, -1, 388, 389, 390, 391, -1, 392, 393, 394, 395, -1, 396, 397, 398, 399, -1, 400, 401, 402, 403, -1, 404, 405, 406, 407, -1, 408, 409, 410, 411, -1, 412, 413, 414, 415, -1, 416, 417, 418, 419, -1, 420, 421, 422, 423, -1, 424, 425, 426, 427, -1, 428, 429, 430, 431, -1, 432, 433, 434, 435, -1, 436, 437, 438, 439, -1, 440, 441, 442, 443, -1, 444, 445, 446, 447, -1, 448, 449, 450, 451, -1, 452, 453, 454, 455, -1, 456, 457, 458, 459, -1, 460, 461, 462, 463, -1, 464, 465, 466, 467, -1, 468, 469, 470, 471, -1, 472, 473, 474, 475, -1, 476, 477, 478, 479, -1, 480, 481, 482, 483, -1, 484, 485, 486, 487, -1, 488, 489, 490, 491, -1, 492, 493, 494, 495, -1, 496, 497, 498, 499, -1, 500, 501, 502, 503, -1, 504, 505, 506, 507, -1, 508, 509, 510, 511, -1, 512, 513, 514, 515, -1, 516, 517, 518, 519, -1, 520, 521, 522, 523, -1, 524, 525, 526, 527, -1, 528, 529, 530, 531, -1, 532, 533, 534, 535, -1, 536, 537, 538, 539, -1, 540, 541, 542, 543, -1, 544, 545, 546, 547, -1, 548, 549, 550, 551, -1, 552, 553, 554, 555, -1, 556, 557, 558, 559, -1, 560, 561, 562, 563, -1, 564, 565, 566, 567, -1, 568, 569, 570, 571, -1, 572, 573, 574, 575, -1, 576, 577, 578, 579, -1, 580, 581, 582, 583, -1, 584, 585, 586, 587, -1, 588, 589, 590, 591, -1, 592, 593, 594, 595, -1, 596, 597, 598, 599, -1, 600, 601, 602, 603, -1, 604, 605, 606, 607, -1, 608, 609, 610, 611, -1, 612, 613, 614, 615, -1, 616, 617, 618, 619, -1, 620, 621, 622, 623, -1, 624, 625, 626, 627, -1, 628, 629, 630, 631, -1, 632, 633, 634, 635, -1, 636, 637, 638, 639, -1, 640, 641, 642, 643, -1, 644, 645, 646, 647, -1, 648, 649, 650, 651, -1, 652, 653, 654, 655, -1, 656, 657, 658, 659, -1, 660, 661, 662, 663, -1, 664, 665, 666, 667, -1, 668, 669, 670, 671, -1, 672, 673, 674, 675, -1, 676, 677, 678, 679, -1, 680, 681, 682, 683, -1, 684, 685, 686, 687, -1, 688, 689, 690, 691, -1, 692, 693, 694, 695, -1, 696, 697, 698, 699, -1, 700, 701, 702, 703, -1, 704, 705, 706, 707, -1, 708, 709, 710, 711, -1, 712, 713, 714, 715, -1, 716, 717, 718, 719, -1, 720, 721, 722, 723, -1, 724, 725, 726, 727, -1, 728, 729, 730, 731, -1, 732, 733, 734, 735, -1, 736, 737, 738, 739, -1, 740, 741, 742, 743, -1, 744, 745, 746, 747, -1, 748, 749, 750, 751, -1, 752, 753, 754, 755, -1, 756, 757, 758, 759, -1, 760, 761, 762, 763, -1, 764, 765, 766, 767, -1, 768, 769, 770, 771, -1, 772, 773, 774, 775, -1, 776, 777, 778, 779, -1, 780, 781, 782, 783, -1, 784, 785, 786, 787, -1, 788, 789, 790, 791, -1, 792, 793, 794, 795, -1, 796, 797, 798, 799, -1'>
              <Coordinate/>
            </IndexedTriangleFanSet>
          </Shape>
        </Transform>
        <TimeSensor DEF='_2'
            loop='true'/>
        <Script DEF='BirdsScript'
            directOutput='true'>
          <field accessType='inputOnly' type='SFTime' name='set_time'/>
          <field accessType='initializeOnly' type='SFInt32' name='numBirds'/>
          <field accessType='initializeOnly' type='SFFloat' name='scaleFactor'/>
          <field accessType='initializeOnly' type='SFNode' name='geometry'>
            <IndexedTriangleFanSet USE='_1'/>
          </field>
          <IS>
            <connect nodeField='numBirds' protoField='numBirds'/>
            <connect nodeField='scaleFactor' protoField='scaleFactor'/>
          </IS>
<![CDATA[ecmascript:

var
	boids = [ ],
	zAxis = new SFVec3f (0, 0, 1);

var template = [
	new SFVec3f (0, 0, 1),
	new SFVec3f (1, 0, 0),
	new SFVec3f (0, 0, -1),
	new SFVec3f (-1, 0, 0),
];

function initialize ()
{
	build ();
}

function set_time (value, time)
{
	var
		dt     = 1 / Browser .currentFrameRate,
		point  = geometry .coord .point,
		points = template;

	for (var i = 0, length = boids .length; i < length; ++ i)
	{
		var
			boid  = boids [i],
			run   = boid .run (boids),
			speed = boid .velocity .length () * 10,
			time  = boid .time += dt + Math .random () * 0.01;
			x     = speed * time,
			sin   = Math .abs (Math .sin (x)),
			cos   = Math .cos (x);

		points [1] .x = sin;
		points [1] .y = cos;
		points [3] .x = -sin;
		points [3] .y = cos;

		for (var p = 0; p < 4; ++ p)
		{
			var rotation = new SFRotation (zAxis, boid .velocity);

			point [i * 4 + p] = rotation .multVec (points [p]) .multiply (scaleFactor) .add (boid .position);
		}
	}
}

function build ()
{
	var
		index = new MFInt32 (),
		point = geometry .coord .point;

	point .length = 0;
	boids .length = 0;

	for (var i = 0; i < numBirds; ++ i)
	{
		var boid = boids [i] = new Boid ();

		boid .time       = 0;
		boid .position.x = Math .random () * 1000 - 500;
		boid .position.y = Math .random () * 1000 - 500;
		boid .position.z = Math .random () * 500 - 0;
		boid .velocity.x = Math .random () * 2 - 1;
		boid .velocity.y = Math .random () * 2 - 1;
		boid .velocity.z = Math .random () * 2 - 1;
		boid .setAvoidWalls (true);
		boid .setWorldSize (500, 200, 500);

		for (var t = 0, tl = 4; t < tl; ++ t)
		{
			index .push (i * tl + t);
		}

		index .push (-1)
	}

	geometry .set_index = index;
}

// Based on https://www.openprocessing.org/sketch/6910

var Boid = function ()
{
	var
		vector              = new SFVec3f (),
		_acceleration       = new SFVec3f (),
		_width              = 500,
		_height             = 500,
		_depth              = 200,
		_goal,
		_neighborhoodRadius = 80,
		_maxSpeed           = 4,
		_maxSteerForce      = 0.1,
		_avoidWalls         = false;

	this .position = new SFVec3f ();
	this .velocity = new SFVec3f ();

	this .setGoal = function (target)
	{
		_goal = target;
	};

	this .setAvoidWalls = function (value)
	{
		_avoidWalls = value;
	};

	this.setWorldSize = function (width, height, depth)
	{
		_width  = width;
		_height = height;
		_depth  = depth;
	};

	this .run = function (boids)
	{
		if (_avoidWalls)
		{
			vector .x     = -_width;
			vector .y     = this .position .y;
			vector .z     = this .position .z;
			vector        = this .avoid (vector);
			vector        = vector .multiply (5);
			_acceleration = _acceleration .add (vector);

			vector .x     = _width;
			vector .y     = this .position .y;
			vector .z     = this .position .z;
			vector        = this .avoid (vector);
			vector        = vector .multiply (5);
			_acceleration = _acceleration .add (vector);

			vector .x     = this .position .x;
			vector .y     = -_height;
			vector .z     = this .position .z;
			vector        = this .avoid (vector);
			vector        = vector .multiply (5);
			_acceleration = _acceleration .add (vector);

			vector .x     = this .position .x;
			vector .y     = _height;
			vector .z     = this .position .z;
			vector        = this .avoid (vector);
			vector        = vector .multiply (5);
			_acceleration = _acceleration .add (vector);

			vector .x     = this .position .x;
			vector .y     = this .position .y;
			vector .z     = -_depth;
			vector        = this .avoid (vector);
			vector        = vector .multiply (5);
			_acceleration = _acceleration .add (vector);

			vector .x     = this .position .x;
			vector .y     = this .position .y;
			vector .z     = _depth;
			vector        = this .avoid (vector);
			vector        = vector .multiply (5);
			_acceleration = _acceleration .add (vector);
		}
		/*
		else
		{
			this .checkBounds ();
		}
		*/

		if (Math .random () > 0.5)
		{
			this .flock (boids);
		}

		this .move ();
	};

	this .flock = function (boids)
	{
		if (_goal)
		{
			_acceleration = _acceleration .add (this .reach (_goal, 0.005));
		}

		_acceleration = _acceleration .add (this .alignment (boids));
		_acceleration = _acceleration .add (this .cohesion (boids));
		_acceleration = _acceleration .add (this .separation (boids));
	};

	this .move = function ()
	{
		this .velocity = this .velocity .add (_acceleration);

		var l = this .velocity .length ();

		if (l > _maxSpeed)
		{
			this .velocity = this .velocity .divide (l / _maxSpeed);
		}

		this .position = this .position .add (this .velocity);

		_acceleration .x = 0;
		_acceleration .y = 0;
		_acceleration .z = 0;
	};

	this .checkBounds = function ()
	{
		if (this .position .x >   _width)  this .position .x = -_width;
		if (this .position .x < - _width)  this .position .x =  _width;
		if (this .position .y >   _height) this .position .y = -_height;
		if (this .position .y < - _height) this .position .y =  _height;
		if (this .position .z >   _depth)  this .position .z = -_depth;
		if (this .position .z < - _depth)  this .position .z =  _depth;
	};

	//

	this .avoid = function (target)
	{
		var
			steer    = this .position .subtract (target),
			distance = this .position .subtract (target);

		steer = steer .multiply (1 / distance .dot (distance));

		return steer;
	};

	this .repulse = function (target)
	{
		var distance = this .position .subtract (target) .length ();

		if (distance < 150)
		{
			var steer = this .position .subtract (target);

			steer = steer .multiply (0.5 / distance);

			_acceleration = _acceleration .add (steer);
		}
	};

	this .reach = function (target, amount)
	{
		var steer = target .subtract (this .position);

		steer = steer .multiply (amount);

		return steer;
	};

	this.alignment = function (boids)
	{
		var
			count  = 0,
			velSum = new SFVec3f ();

		for (var i = 0, length = boids .length; i < length; ++ i)
		{
			if (Math .random () > 0.6)
				continue;

			var
				boid     = boids [i],
				distance = boid .position .subtract (this .position) .length ();

			if (distance > 0 && distance <= _neighborhoodRadius)
			{
				velSum = velSum .add (boid .velocity);

				++ count;
			}
		}

		if (count > 0)
		{
			velSum = velSum .divide (count);

			var l = velSum .length ();

			if (l > _maxSteerForce)
			{
				velSum = velSum .divide (l / _maxSteerForce);
			}
		}

		return velSum;
	};

	this .cohesion = function (boids)
	{
		var
			count  = 0,
			posSum = new SFVec3f (),
			steer  = new SFVec3f ();

		for (var i = 0, length = boids .length; i < length; ++ i)
		{
			if (Math .random () > 0.6)
				continue;

			var
				boid     = boids [i],
				distance = boid .position .subtract (this .position) .length ();

			if (distance > 0 && distance <= _neighborhoodRadius)
			{
				posSum = posSum .add (boid .position);

				++ count;
			}
		}

		if (count > 0)
		{
			posSum = posSum .divide (count);
		}

		steer = posSum .subtract(this .position);

		var l = steer .length ();

		if (l > _maxSteerForce)
		{
			steer = steer .divide (l / _maxSteerForce);
		}

		return steer;
	};

	this .separation = function (boids)
	{
		var
			posSum  = new SFVec3f (),
			repulse = new SFVec3f ();

		for (var i = 0, length = boids .length; i < length; ++ i)
		{
			if (Math .random () > 0.6)
				continue;

			var
				boid     = boids [i],
				distance = boid .position .subtract (this .position) .length ();

			if (distance > 0 && distance <= _neighborhoodRadius)
			{
				repulse = this .position .subtract (boid.position );
				repulse = repulse .normalize ();
				repulse = repulse .divide (distance);
				posSum  = posSum .add (repulse);

			}
		}

		return posSum;
	}
}]]>
        </Script>
        <ROUTE fromNode='_2' fromField='time' toNode='BirdsScript' toField='set_time'/>
      </ProtoBody>
    </ProtoDeclare>
    <LayerSet
        activeLayer='3'
        order='1, 2, 3'>
      <Layer DEF='Night'>
        <Viewpoint DEF='_2'
            description='Initial View'/>
        <Background DEF='CityNight'
            skyAngle='0.8, 1.3, 1.4, 1.5708'
            skyColor='0.0392 0.0392 0.0471, 0.0588 0.0745 0.1098, 0.051 0.0667 0.0588, 0.0471 0.0627 0.0275, 0.12 0.0902 0.05098'
            groundAngle='0.6, 1.2, 1.3, 1.5708'
            groundColor='0 0 0, 0 0 0, 0 0 0, 0 0 0, 0 0 0'/>
        <ClipPlane DEF='NightPlane'
            plane='-1 0 0 0'/>
      </Layer>
      <Layer DEF='Day'>
        <Viewpoint USE='_2'/>
        <Background DEF='Summer'
            skyAngle='0.8, 1.3, 1.4, 1.5708'
            skyColor='0.21 0.31 0.59, 0.33 0.45 0.7, 0.57 0.66 0.85, 0.6 0.73 0.89, 0.7 0.83 0.98'
            groundAngle='0.659972, 1.2, 1.39912, 1.5708'
            groundColor='0.105712 0.156051 0.297, 0.187629 0.255857 0.398, 0.33604 0.405546 0.542, 0.3612 0.469145 0.602, 0.39471 0.522059 0.669'/>
        <ClipPlane DEF='DayPlane'
            plane='1 0 0 0'/>
      </Layer>
      <Layer DEF='World_1'>
        <Viewpoint USE='_2'/>
        <Group DEF='Night_1'>
          <Transform DEF='Rain'
              translation='0 5.01402 0'>
            <ParticleSystem
                geometryType='LINE'
                maxParticles='2000'
                particleLifetime='3'
                lifetimeVariation='0.1'
                particleSize='0.1 0.1'
                bboxSize='30 30 30'
                bboxCenter='0 -5 0'>
              <SurfaceEmitter
                  speed='0.2'
                  mass='0.01'
                  surfaceArea='0.01'>
                <IndexedFaceSet containerField='surface'
                    ccw='false'
                    coordIndex='0, 1, 2, 3, -1'>
                  <Coordinate
                      point='-10 0 10, 10 0 10, 10 0 -10, -10 0 -10'/>
                </IndexedFaceSet>
              </SurfaceEmitter>
              <WindPhysicsModel
                  direction='0 -1 0'
                  speed='1.5'
                  turbulence='0.5'/>
              <Appearance>
                <Material
                    emissiveColor='0 0.498039 1'
                    transparency='0.696809'/>
              </Appearance>
            </ParticleSystem>
          </Transform>
          <ClipPlane USE='NightPlane'/>
        </Group>
        <Group DEF='Day_1'>
          <Transform DEF='Birds'
              translation='0 300 0'>
            <ProtoInstance name='Birds'>
              <fieldValue name='numBirds' value='100'/>
              <fieldValue name='appearance'>
                <Appearance DEF='_16'>
                  <Material
                      diffuseColor='0.366785 0.224382 0.134316'/>
                </Appearance>
              </fieldValue>
            </ProtoInstance>
          </Transform>
          <ClipPlane USE='DayPlane'/>
        </Group>
      </Layer>
    </LayerSet>
  </Scene>
</X3D>
