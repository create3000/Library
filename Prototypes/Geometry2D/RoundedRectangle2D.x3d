<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "https://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Scripting' level='1'/>
    <meta name='comment' content='World of Titania'/>
    <meta name='created' content='Sun, 20 Sep 2015 06:48:36 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Titania V4.3.6, http://titania.create3000.de'/>
    <meta name='generator' content='Sunrize X3D Editor V1.7.45, https://create3000.github.io/sunrize/'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Library/Prototypes/Geometry2D/RoundedRectangle2D.x3d'/>
    <meta name='modified' content='Thu, 23 Jan 2025 15:29:28 GMT'/>
  </head>
  <Scene>
    <ProtoDeclare name='RoundedRectangle2D'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFFloat' name='cornerRadius' value='1'/>
        <field accessType='inputOutput' type='SFVec2f' name='size' value='2 2'/>
        <field accessType='initializeOnly' type='SFBool' name='solid'/>
      </ProtoInterface>
      <ProtoBody>
        <IndexedFaceSet DEF='Geometry'
            normalPerVertex='false'>
          <TextureCoordinate/>
          <Coordinate/>
        </IndexedFaceSet>
        <Script DEF='RoundedRectangle2D'
            directOutput='true'>
          <field accessType='inputOutput' type='SFFloat' name='cornerRadius'/>
          <field accessType='inputOutput' type='SFVec2f' name='size'/>
          <field accessType='initializeOnly' type='SFFloat' name='cornerDimension' value='10'/>
          <field accessType='inputOutput' type='SFBool' name='solid'/>
          <field accessType='initializeOnly' type='SFNode' name='geometry'>
            <IndexedFaceSet USE='Geometry'/>
          </field>
          <IS>
            <connect nodeField='cornerRadius' protoField='cornerRadius'/>
            <connect nodeField='size' protoField='size'/>
            <connect nodeField='solid' protoField='solid'/>
          </IS>
<![CDATA[ecmascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	const radius = Math .min (Math .min (cornerRadius, size .x / 2), size .y / 2);

	const
		point         = new SFVec3f (radius, 0, 0),
		startRotation = new SFRotation (0, 0, 1, 0),
		endRotation   = new SFRotation (0, 0, 1, Math .PI / 2),
		maxSize       = Math .max (size .x, size .y),
		corner        = new MFVec3f (),
		coordIndex    = new MFInt32 (),
		coord         = geometry .coord .point,
		texCoord      = geometry .texCoord .point;

	coord    .length = 0;
	texCoord .length = 0;

	for (let i = 0, length = cornerDimension * 4; i < length; ++ i)
		coordIndex [coordIndex .length] = i;
		
	coordIndex [coordIndex .length] = -1;

	for (let i = 0; i < cornerDimension; ++i)
		corner [i] = startRotation .slerp (endRotation, i / (cornerDimension - 1)) .multVec (point);
	
	var translation = new SFVec3f (size .x / 2 - radius, size .y / 2 - radius, 0);

	for (let i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = corner [i] .add (translation);

	var
		translation = new SFVec3f (-size .x / 2 + radius, size .y / 2 - radius, 0),
		rotation    = new SFRotation (0, 0, 1, Math .PI * 0.5);

	for (let i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = rotation .multVec (corner [i]) .add (translation);

	var
		translation = new SFVec3f (-size .x / 2 + radius, -size .y / 2 + radius, 0),
		rotation    = new SFRotation (0, 0, 1, Math .PI);

	for (let i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = rotation .multVec (corner [i]) .add (translation);

	var
		translation = new SFVec3f (size .x / 2 - radius, -size .y / 2 + radius, 0),
		rotation    = new SFRotation (0, 0, 1, Math .PI * 1.5);

	for (let i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = rotation .multVec (corner [i]) .add (translation);

	const maxSize1_2 = new SFVec3f (maxSize / 2, maxSize / 2, 0);

	for (let i = 0, length = coord .length; i < length; ++ i)
	{
		const tex = coord [i] .add (maxSize1_2) .divide (maxSize);

		texCoord [i] = new SFVec2f (tex .x, tex .y);
	}

	if (!solid)
	{
		for (let i = 0, length = cornerDimension * 4; i < length; ++ i)
			coordIndex [coordIndex .length] = length - 1 - i;

		coordIndex [coordIndex .length] = -1;
	}

	geometry .set_coordIndex = coordIndex;
}
]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
    <WorldInfo
        title='RoundedRectangle2D'>
      <MetadataSet DEF='Titania' containerField='metadata'
          name='Titania'
          reference='http://titania.create3000.de'>
        <MetadataSet DEF='Page'
            name='Page'
            reference='http://titania.create3000.de'>
          <MetadataInteger DEF='activeView'
              name='activeView'
              reference='http://titania.create3000.de'
              value='1'/>
          <MetadataInteger DEF='multiView'
              name='multiView'
              reference='http://titania.create3000.de'
              value='1'/>
        </MetadataSet>
        <MetadataSet DEF='Selection'
            name='Selection'
            reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='selectGeometry'
              name='selectGeometry'
              reference='http://titania.create3000.de'
              value='false'/>
          <MetadataSet DEF='nodes'
              name='nodes'
              reference='http://titania.create3000.de'/>
        </MetadataSet>
        <MetadataSet DEF='Grid'
            name='Grid'
            reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='enabled'
              name='enabled'
              reference='http://titania.create3000.de'
              value='true'/>
        </MetadataSet>
      </MetadataSet>
    </WorldInfo>
    <Transform DEF='Sphere'>
      <Shape>
        <Appearance>
          <Material/>
        </Appearance>
        <ProtoInstance name='RoundedRectangle2D' containerField='geometry'>
          <fieldValue name='size' value='4 4'/>
        </ProtoInstance>
      </Shape>
    </Transform>
  </Scene>
</X3D>
