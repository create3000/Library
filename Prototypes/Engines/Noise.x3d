<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Full' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta name='comment' content='World of Titania'/>
    <meta name='created' content='Sun, 17 Dec 2017 11:02:55 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Titania V4.0.3, http://titania.create3000.de'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Library/Prototypes/Engines/Noise.x3d'/>
    <meta name='modified' content='Sun, 17 Dec 2017 12:12:29 GMT'/>
  </head>
  <Scene>
    <ProtoDeclare name='Noise'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFBool' name='enabled'/>
        <field accessType='inputOutput' type='SFFloat' name='frequency' value='1'/>
        <field accessType='inputOutput' type='SFFloat' name='amplitude' value='1'/>
        <field accessType='inputOutput' type='SFFloat' name='phase' value='1'/>
        <field accessType='outputOnly' type='SFFloat' name='value_changed'/>
      </ProtoInterface>
      <ProtoBody>
        <Script DEF='NoiseScript'
            directOutput='true'>
          <field accessType='inputOnly' type='SFTime' name='set_time'/>
          <field accessType='inputOutput' type='SFFloat' name='frequency'/>
          <field accessType='inputOutput' type='SFFloat' name='amplitude'/>
          <field accessType='inputOutput' type='SFFloat' name='phase'/>
          <field accessType='outputOnly' type='SFFloat' name='value_changed'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR00' value='-0.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR01' value='1.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR02' value='-1.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR03' value='0.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR10' value='1'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR11' value='-2.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR12' value='2'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR13' value='-0.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR20' value='-0.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR21'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR22' value='0.5'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR23'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR30'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR31' value='1'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR32'/>
          <field accessType='initializeOnly' type='SFFloat' name='CR33'/>
          <field accessType='initializeOnly' type='SFInt32' name='TABSIZE' value='256'/>
          <field accessType='initializeOnly' type='SFInt32' name='TABMASK' value='255'/>
          <field accessType='initializeOnly' type='MFFloat' name='VALUTAB' value='0.383138, -0.581526, 0.342657, -0.664832, -0.247722, 0.857868, 0.0936169, -0.673307, 0.578671, 0.336184, -0.647336, 0.120563, 0.299218, -0.0538242, -0.720128, -0.147222, 0.380193, -0.210365, -0.366947, 0.182674, -0.193456, -0.397354, -0.291099, -0.942401, 0.573611, 0.800783, 0.411503, -0.0588022, 0.68851, -0.199378, -0.287656, -0.670541, 0.0615049, -0.856116, 0.107674, -0.732644, 0.978216, 0.557922, 0.458441, -0.594921, -0.408431, -0.368774, -0.185208, -0.103454, 0.0579431, -0.73501, -0.518599, 0.14401, 0.565004, 0.481755, -0.328266, -0.968689, 0.559279, 0.529534, 0.62862, -0.135557, 0.979553, -0.485239, -0.944701, -0.248204, 0.237735, 0.0298209, -0.894564, 0.607619, 0.0618701, -0.589163, -0.97764, -0.649108, -0.873462, -0.631166, -0.2029, 0.198, 0.643909, 0.782279, 0.931585, 0.211244, 0.774287, 0.421469, 0.547661, 0.466416, -0.161987, -0.704878, 0.674402, -0.658673, -0.128851, -0.83304, -0.424557, -0.496642, 0.0654026, 0.585007, -0.555085, 0.187758, 0.0683101, 0.498723, -0.295189, -0.690388, -0.00725752, 0.209046, -0.521559, -0.158957, -0.704668, -0.996198, -0.406093, -0.288586, 0.431478, -0.624102, 0.68836, 0.251943, -0.619865, 0.20411, -0.361957, 0.907329, -0.245375, 0.696219, -0.369019, -0.424343, 0.276274, 0.251648, -0.271558, 0.514022, 0.885709, -0.304302, -0.271919, -0.739018, 0.702206, -0.43011, -0.453984, 0.47812, -0.585472, -0.667161, -0.823166, 0.0016733, 0.497226, -0.566476, -0.430139, 0.721355, -0.10556, 0.263708, 0.476802, -0.832833, -0.501229, -0.0212649, 0.480166, -0.113832, 0.875852, -0.904203, -0.99632, -0.170144, -0.754225, -0.363782, 0.135211, -0.951042, 0.730608, 0.373229, -0.440523, -0.993877, -0.687248, -0.520897, 0.802161, -0.231817, -0.178049, -0.464538, -0.671171, 0.228294, -0.420685, -0.522007, 0.82132, -0.665524, 0.0747592, -0.408302, -0.828869, -0.935283, -0.760198, -0.844713, 0.383551, -0.410019, 0.500737, -0.246831, 0.67816, -0.294849, 0.8577, 0.630986, 0.60054, -0.815915, 0.733247, -0.234492, -0.073096, 0.228646, -0.730441, -0.447836, 0.547597, 0.632747, 0.126476, -0.816627, 0.357254, -0.328893, 0.643082, 0.898296, 0.458673, -0.951403, -0.526379, 0.329519, 0.704272, -0.490273, 0.494075, 0.154625, 0.753294, 0.908996, -0.101228, -0.819489, -0.585291, -0.318518, 0.966945, -0.15424, 0.075085, 0.729261, 0.977203, -0.0787457, 0.47746, 0.752864, -0.816559, 0.921692, -0.978419, -0.991791, -0.361269, 0.410539, -0.902351, -0.641947, -0.0356836, -0.0115879, -0.25499, 0.313249, 0.908852, -0.700218, -0.855964, -0.477294, -0.2714, 0.875325, -0.896266, -0.127833, -0.957675, -0.952842, -0.200586, -0.00944685, -0.124825, 0.531637, 0.544039, 0.538829, -0.896091, 0.569293, 0.343706, -0.830008, -0.548661, 0.743917, -0.608047, -0.500035'/>
          <field accessType='initializeOnly' type='MFInt32' name='PERM' value='225, 155, 210, 108, 175, 199, 221, 144, 203, 116, 70, 213, 69, 158, 33, 252, 5, 82, 173, 133, 222, 139, 174, 27, 9, 71, 90, 246, 75, 130, 91, 191, 169, 138, 2, 151, 194, 235, 81, 7, 25, 113, 228, 159, 205, 253, 134, 142, 248, 65, 224, 217, 22, 121, 229, 63, 89, 103, 96, 104, 156, 17, 201, 129, 36, 8, 165, 110, 237, 117, 231, 56, 132, 211, 152, 20, 181, 111, 239, 218, 170, 163, 51, 172, 157, 47, 80, 212, 176, 250, 87, 49, 99, 242, 136, 189, 162, 115, 44, 43, 124, 94, 150, 16, 141, 247, 32, 10, 198, 223, 255, 72, 53, 131, 84, 57, 220, 197, 58, 50, 208, 11, 241, 28, 3, 192, 62, 202, 18, 215, 153, 24, 76, 41, 15, 179, 39, 46, 55, 6, 128, 167, 23, 188, 106, 34, 187, 140, 164, 73, 112, 182, 244, 195, 227, 13, 35, 77, 196, 185, 26, 200, 226, 119, 31, 123, 168, 125, 249, 68, 183, 230, 177, 135, 160, 180, 12, 1, 243, 148, 102, 166, 38, 238, 251, 37, 240, 126, 64, 74, 161, 40, 184, 149, 171, 178, 101, 66, 29, 59, 146, 61, 254, 107, 42, 86, 154, 4, 236, 232, 120, 21, 233, 209, 45, 98, 193, 114, 78, 19, 206, 14, 118, 127, 48, 79, 147, 85, 30, 207, 219, 54, 88, 234, 190, 122, 95, 67, 143, 109, 137, 214, 145, 93, 92, 100, 245, 0, 216, 186, 60, 83, 105, 97, 204, 52'/>
          <field accessType='initializeOnly' type='SFNode' name='timer'>
            <TimeSensor DEF='Timer'
                loop='true'>
              <IS>
                <connect nodeField='enabled' protoField='enabled'/>
              </IS>
            </TimeSensor>
          </field>
          <field accessType='initializeOnly' type='SFInt32' name='seed'/>
          <IS>
            <connect nodeField='frequency' protoField='frequency'/>
            <connect nodeField='amplitude' protoField='amplitude'/>
            <connect nodeField='phase' protoField='phase'/>
            <connect nodeField='value_changed' protoField='value_changed'/>
          </IS>
<![CDATA[ecmascript:

// PEACHEYnoise

var xknots = [ ];
var yknots = [ ];
var zknots = [ ];

function initialize ()
{
	for (i = 0; i < TABSIZE; i++)
		VALUTAB [i] = 1.0 - 2.0 * Math .random ();
}

function set_time (time)
{
	value_changed = amplitude * vnoise (time * frequency) + phase;
}

function vnoise (value)
{
	xknots .length = 0;
	yknots .length = 0;
	zknots .length = 0;

	var ix = Math .floor (value);
	var fx = value - ix;

	for (k = -1; k <= 2; k ++)
	{
		for (j = -1; j <= 2; j ++)
		{
			for (i = -1; i <= 2; i ++)
				xknots [i + 1] = vlattice (ix + i, ix + j, k);

			yknots [j + 1] = spline (fx, 4, xknots);
		}

		zknots [k + 1] = spline (fx, 4, yknots);
	}

	return spline (0, 4, zknots);
}

function spline (x, nknots, knot)
{
	var i      = 0;
	var nspans = nknots - 3;

	if (nspans >= 1)
	{
		/* Find the appropriate 4-point span of the spline. */
		var x    = clamp(x, 0, 1) * nspans;
		var span = Math.floor(x);
		
		if (span >= (nknots - 3))
			span = (nknots - 3);
		
		x -= span;
		i += span;

		/* Evaluate the span cubic at x using Horners rule. */
		var c3 = CR00 * knot [0 + i] + CR01 * knot [1 + i] + CR02 * knot [2 + i] + CR03 * knot [3 + i];
		var c2 = CR10 * knot [0 + i] + CR11 * knot [1 + i] + CR12 * knot [2 + i] + CR13 * knot [3 + i];
		var c1 = CR20 * knot [0 + i] + CR21 * knot [1 + i] + CR22 * knot [2 + i] + CR23 * knot [3 + i];
		var c0 = CR30 * knot [0 + i] + CR31 * knot [1 + i] + CR32 * knot [2 + i] + CR33 * knot [3 + i];

		return ((c3 * x + c2) * x + c1) * x + c0;
	}
}

function perm (x)
{
	return PERM [(x & TABMASK)];
}

function index (ix, iy, iz)
{
	return perm (ix + perm (iy + perm (iz)));
}

function vlattice (ix, iy, iz)
{
	return VALUTAB [index (ix, iy, iz)];
}

function clamp (x, a, b)
{
	return x <= a ? a : (x >= b ? b : x);
}
]]>
        </Script>
        <ROUTE fromNode='Timer' fromField='time' toNode='NoiseScript' toField='set_time'/>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
